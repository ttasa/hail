buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
  id "com.gradle.build-scan" version "1.0"
  id 'java'
  id 'scala'
  id 'idea'
  id 'maven'
  id 'jacoco'
  id 'com.github.johnrengelman.shadow' version '1.2.3'
  id "de.undercouch.download" version "3.2.0"
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

repositories {
    mavenCentral()
    jcenter()
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

String hailVersion = "devel"
String[] deployedSparkVersions = ["2.0.2", "2.1.0"]
String gitHash = exec {commandLine 'git', 'rev-parse', '--short', 'HEAD'}

String sparkVersion = System.getProperty("spark.version","2.0.2")

if (!(sparkVersion ==~ /^2\..*/))
    ant.fail('Hail does not support Spark version ' + sparkVersion + '. Hail team recommends version 2.0.2.')

String scalaVersion = '2.11.8'
String scalaMajorVersion = '2.11'

String py4jVersion
String breezeVersion
if (sparkVersion ==~ /^2\.1.*/) {
    py4jVersion = '0.10.4'
    breezeVersion = '0.12'
} else {
    py4jVersion = '0.10.3'
    breezeVersion = '0.11.2'
}

String mongoVersion = '2.0.0'

String sparkHome = System.getProperty("spark.home", System.env.SPARK_HOME)

sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []
sourceSets.test.runtimeClasspath += files("src/main/c/lib")

task nativeLib(type: Exec) {
    workingDir 'src/main/c'
    executable 'make'
    outputs.upToDateWhen { false }
}

task nativeLibTest(type: Exec) {
    workingDir 'src/main/c'
    args('test')
    executable 'make'
    outputs.upToDateWhen { false }
}

task nativeLibClean(type: Exec) {
    workingDir 'src/main/c'
    args('clean')
    executable 'make'
    outputs.upToDateWhen { false }
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/c/lib"
        }
    }
}
compileScala.dependsOn(nativeLib)
test.dependsOn(nativeLibTest)
clean.dependsOn(nativeLibClean)

compileJava {
    options.compilerArgs << "-Xlint:all" << "-Werror"
}

task generateBuildInfo(type: Exec) {
    commandLine 'sh', 'generate-build-info.sh', sparkVersion, hailVersion
    outputs.upToDateWhen { false }
}

task generateDistLinks(type: Exec) {
    executable 'sh'
    args(['generate-dist-links.sh'])
    args(hailVersion)
    args(deployedSparkVersions)
}

compileScala {
    dependsOn generateBuildInfo

    scalaCompileOptions.additionalParameters = ["-feature"] // , "-Xfatal-warnings"]
}

dependencies {
    //"compile group: 'com.intel', name: 'genomicsdb', version: '0.6.4-proto-3.0.0-beta-1'" currently does not support spark-core 2.11
    compile files("libs/genomicsdb-0.6.4.jar")
    compile files("libs/splash-0.2.0.jar")
    compile 'org.scala-lang:scala-library:' + scalaVersion
    compile 'org.scala-lang:scala-reflect:' + scalaVersion
    compile('org.apache.spark:spark-core_' + scalaMajorVersion + ':' + sparkVersion) {
        exclude module: 'hadoop-client'
    }
    compile('org.apache.hadoop:hadoop-client:2.7.1') {
        exclude module: 'servlet-api'
    }
    compile 'org.apache.spark:spark-sql_' + scalaMajorVersion + ':' + sparkVersion
    compile 'org.apache.spark:spark-mllib_' + scalaMajorVersion + ':' + sparkVersion
    compile 'net.jpountz.lz4:lz4:1.3.0'
    compile 'org.scalanlp:breeze-natives_' + scalaMajorVersion + ':' + breezeVersion
    compile 'com.github.samtools:htsjdk:2.5.0'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    compile 'org.http4s:http4s-core_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-server_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-argonaut_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-dsl_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-scala-xml_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-client_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-websocket_' + scalaMajorVersion + ':0.1.3'
    compile 'org.http4s:http4s-blaze-core_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-blaze-client_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-blaze-server_' + scalaMajorVersion + ':0.12.3'
    compile 'org.json4s:json4s-core_' + scalaMajorVersion + ':3.2.10'
    // compile 'org.json4s:json4s-native_' + scalaMajorVersion + ':3.2.10'
    compile 'org.json4s:json4s-jackson_' + scalaMajorVersion + ':3.2.10'
    compile 'org.json4s:json4s-ast_' + scalaMajorVersion + ':3.2.10'
    //compile 'org.json4s:json4s-native_' + scalaMajorVersion + ':3.3.0'
    //compile 'org.json4s:json4s-jackson_' + scalaMajorVersion + ':3.3.0'
    //compile 'org.json4s:json4s-ast_' + scalaMajorVersion + ':3.3.0'

    compile 'org.mongodb.spark:mongo-spark-connector_' + scalaMajorVersion + ':' + mongoVersion

    compile 'org.apache.solr:solr-solrj:6.2.0'
    compile 'com.datastax.cassandra:cassandra-driver-core:3.0.0'

    compile 'com.jayway.restassured:rest-assured:2.8.0'

    compile group: 'org.ow2.asm', name: 'asm', version: '5.1'
    compile group: 'org.ow2.asm', name: 'asm-util', version: '5.1'
    compile group: 'org.ow2.asm', name: 'asm-analysis', version: '5.1'

    compile 'net.java.dev.jna:jna:4.2.2'
    compile 'net.sourceforge.jdistlib:jdistlib:0.4.5'

    testCompile 'org.testng:testng:6.8.21'
    testCompile 'org.scalatest:scalatest_' + scalaMajorVersion + ':2.2.4'

    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
}

task(checkSettings) << {
    def checkSeed = System.getProperty("check.seed", "1")
    if (checkSeed == "random")
        checkSeed = new Random().nextInt().toString()
    def checkSize = System.getProperty("check.size", "1000")
    def checkCount = System.getProperty("check.count", "10")

    println "check: seed = $checkSeed, size = $checkSize, count = $checkCount"

    // override with these defaults, random seed
    System.setProperty("check.seed", checkSeed)
    System.setProperty("check.size", checkSize)
    System.setProperty("check.count", checkCount)
}

test {
    useTestNG {}

    systemProperties System.getProperties()

    testLogging {
        events "passed", "skipped", "failed"
    }

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

test.dependsOn(checkSettings)

task testPython(type: Exec, dependsOn: shadowJar) {
     commandLine 'python', '-m', 'unittest', 'hail.typecheck.tests', 'hail.tests.tests'
     environment SPARK_HOME: sparkHome
     environment PYTHONPATH: '' + projectDir + '/python:' + sparkHome + '/python:' + sparkHome + '/python/lib/py4j-' + py4jVersion + '-src.zip'
     environment SPARK_CLASSPATH: '' + projectDir + '/build/libs/hail-all-spark.jar'
}

task testAll(dependsOn: ['testPython', 'test'])

tasks.withType(ShadowJar) {
    manifest {
        attributes 'Implementation-Title': 'Hail',
                'Implementation-Version': '0.0.1-SNAPSHOT'
    }
    baseName = project.name + '-all'
    mergeServiceFiles()
    zip64 true
    // conflict with version in default Hadoop/Spark install
    relocate 'org.apache.http', 'is.hail.relocated.org.apache.http'
    relocate 'com.google.common', 'is.hail.relocated.com.google.common'
    relocate 'org.objectweb', 'is.hail.relocated.org.objectweb'
}

shadowJar {
    classifier = 'spark'
    from(project.sourceSets.main.output)
    configurations = [project.configurations.runtime]
    dependencies {
        include(dependency('org.slf4j:slf4j-api:1.7.25'))

        include(dependency('net.jpountz.lz4:lz4:.*'))
        include(dependency('org.scalanlp:breeze-natives_' + scalaMajorVersion + ':.*'))
        include(dependency('com.github.samtools:htsjdk:.*'))

        include(dependency('org.json4s:json4s-core_' + scalaMajorVersion + ':.*'))
        // include(dependency('org.json4s:json4s-native_' + scalaMajorVersion + ':.*'))
        include(dependency('org.json4s:json4s-jackson_' + scalaMajorVersion + ':.*'))
        include(dependency('org.json4s:json4s-ast_' + scalaMajorVersion + ':.*'))

        include(dependency('org.http4s:http4s-core_' + scalaMajorVersion + ':.*'))

        include(dependency('org.mongodb.spark:mongo-spark-connector_' + scalaMajorVersion + ':.*'))
        include(dependency('org.mongodb:mongo-java-driver:.*'))

        // solr dependencies
        include(dependency('org.apache.solr:solr-solrj:.*'))
        include(dependency('org.apache.httpcomponents:httpclient:.*'))
        include(dependency('org.apache.httpcomponents:httpcore:.*'))
        include(dependency('org.apache.httpcomponents:httpmime:.*'))
        include(dependency('org.apache.zookeeper:zookeeper:.*'))
        include(dependency('org.codehaus.woodstox:stax2-api:.*'))
        include(dependency('org.codehaus.woodstox:woodstox-core-asl:.*'))
        include(dependency('org.noggit:noggit:.*'))

        include(dependency('com.datastax.cassandra:cassandra-driver-core:.*'))
        include(dependency('com.google.guava:guava:.*'))

        include(dependency('org.ow2.asm:asm:.*'))
        include(dependency('org.ow2.asm:asm-util:.*'))
        include(dependency('org.ow2.asm:asm-tree:.*'))
        include(dependency('org.ow2.asm:asm-analysis:.*'))

        include(dependency('net.java.dev.jna:jna:.*'))
        include(dependency('net.sourceforge.jdistlib:jdistlib:.*'))

        include(dependency('org.apache.commons.commons-math3:3.6.1'))
    }
}

task shadowTestJar(type: ShadowJar) {
    classifier = 'spark-test'
    from(project.sourceSets.main.output, project.sourceSets.test.output)
    configurations = [project.configurations.testRuntime]
    dependencies {
        include(dependency('org.slf4j:slf4j-api:1.7.25'))

        include(dependency('net.jpountz.lz4:lz4:.*'))
        include(dependency('org.scalanlp:breeze-natives_' + scalaMajorVersion + ':.*'))
        include(dependency('com.github.samtools:htsjdk:.*'))

        include(dependency('org.json4s:json4s-core_' + scalaMajorVersion + ':.*'))
        // include(dependency('org.json4s:json4s-native_' + scalaMajorVersion + ':.*'))
        include(dependency('org.json4s:json4s-jackson_' + scalaMajorVersion + ':.*'))
        include(dependency('org.json4s:json4s-ast_' + scalaMajorVersion + ':.*'))

        include(dependency('org.http4s:http4s-core_' + scalaMajorVersion + ':.*'))
        include(dependency('org.scalaz:scalaz-core_' + scalaMajorVersion + ':.*'))
        include(dependency('org.scalaz:scalaz-concurrent_' + scalaMajorVersion + ':.*'))
        include(dependency('org.scalaz:scalaz-stream_' + scalaMajorVersion + ':.*'))

        include(dependency('org.mongodb.spark:mongo-spark-connector_' + scalaMajorVersion + ':.*'))
        include(dependency('org.mongodb:mongo-java-driver:.*'))

        // solr dependencies
        include(dependency('org.apache.solr:solr-solrj:.*'))
        include(dependency('org.apache.httpcomponents:httpclient:.*'))
        include(dependency('org.apache.httpcomponents:httpcore:.*'))
        include(dependency('org.apache.httpcomponents:httpmime:.*'))
        include(dependency('org.apache.zookeeper:zookeeper:.*'))
        include(dependency('org.codehaus.woodstox:stax2-api:.*'))
        include(dependency('org.codehaus.woodstox:woodstox-core-asl:.*'))
        include(dependency('org.noggit:noggit:.*'))

        include(dependency('com.datastax.cassandra:cassandra-driver-core:.*'))
        include(dependency('com.google.guava:guava:.*'))

        include(dependency('org.ow2.asm:asm:.*'))
        include(dependency('org.ow2.asm:asm-util:.*'))
        include(dependency('org.ow2.asm:asm-tree:.*'))
        include(dependency('org.ow2.asm:asm-analysis:.*'))

        include(dependency('org.testng:testng:.*'))
        include(dependency('com.beust:jcommander:.*'))
        include(dependency('org.scalatest:scalatest_' + scalaMajorVersion + ':.*'))

        include(dependency('net.java.dev.jna:jna:.*'))
        include(dependency('net.sourceforge.jdistlib:jdistlib:.*'))
        include(dependency('org.apache.commons.commons-math3:3.6.1'))
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

task coverage(dependsOn: jacocoTestReport)

task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
}

task archiveZip(type: Zip) {
    from fileTree('python')
    classifier = 'python'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

task cleanHailDocs(type: Exec) {
    commandLine 'rm', '-rf', 'build/www/', 'build/tmp/python', 'build/tmp/docs'
}

task setupDocsDirs(type: Exec, dependsOn: cleanHailDocs) {
    commandLine 'mkdir', '-p', 'build/www/', 'build/tmp/python/', 'build/tmp/docs', 'build/www/docs'
}

task copyPDF(type: Copy, dependsOn: setupDocsDirs) {
    from 'docs/LeveneHaldane.pdf'
    into 'build/www'
}

task copyWebsiteContent(type: Copy, dependsOn: setupDocsDirs) {
    from 'www/'
    include '*.js'
    include '*.css'
    include '*.css.map'
    include '*.html'
    include '*.png'
    include 'annotationdb/*'
    into 'build/www'
}

task readmeToHtml(type: Exec, dependsOn: setupDocsDirs) {
    commandLine 'pandoc', '-s', 'README.md', '-f', 'markdown', '-t', 'html', '--mathjax',
            '--highlight-style=pygments', '--columns', '10000', '-o', 'build/tmp/README.html'
}

task jobsToHtml(type: Exec, dependsOn: setupDocsDirs) {
    commandLine 'pandoc', '-s', 'www/jobs.md', '-f', 'markdown', '-t', 'html', '--mathjax',
            '--highlight-style=pygments', '--columns', '10000', '-o', 'build/tmp/jobs.html'
}

task buildIndex(type: Exec, dependsOn: ['readmeToHtml']) {
    args('--html', '-o', 'build/www/index.html', 'www/readme-to-index.xslt', 'build/tmp/README.html')
    executable 'xsltproc'
}

task buildJobs(type: Exec, dependsOn: ['jobsToHtml']) {
    args('--html', '-o', 'build/www/jobs.html', 'www/jobs.xslt', 'build/tmp/jobs.html')
    executable 'xsltproc'
}

task copyPythonDirToTmp(type: Copy, dependsOn: setupDocsDirs) {
    from 'python'
    into 'build/tmp/python'
}

task makeFunctionsRst(type: Exec, dependsOn: ['shadowJar', 'copyPythonDirToTmp']) {
    workingDir 'build/tmp/'
    commandLine 'python', '-c', 'from hail import *; from hail.utils import *; hc = HailContext(); fd = FunctionDocumentation(); fd.types_rst("python/hail/docs/types.rst"); fd.functions_rst("python/hail/docs/functions.rst")'
    environment PYTHONPATH: '' + projectDir + '/python:' + sparkHome + '/python:' + sparkHome + '/python/lib/py4j-' + py4jVersion + '-src.zip'
    environment SPARK_HOME: sparkHome
    environment SPARK_CLASSPATH: '' + projectDir + '/build/libs/hail-all-spark.jar'
}

task makeHailDocs(type: Exec, dependsOn: ['shadowJar', 'makeFunctionsRst', 'generateDistLinks', 'copyPythonDirToTmp']) {
    workingDir 'build/tmp/python/hail/docs'
    commandLine 'make', 'SPHINXOPTS="-tchecktutorial"', 'clean', 'html', 'doctest'
    environment SPARK_HOME: sparkHome
    environment SPARK_CLASSPATH: '' + projectDir + '/build/libs/hail-all-spark.jar'
    environment PYTHONPATH: '' + projectDir + '/python:' + sparkHome + '/python:' + sparkHome + '/python/lib/py4j-' + py4jVersion + '-src.zip'
    environment HAIL_VERSION: hailVersion
    environment HAIL_RELEASE: hailVersion + '-' + gitHash
}

task makeHailDocsNoTest(type: Exec, dependsOn: ['shadowJar', 'makeFunctionsRst', 'generateDistLinks', 'copyPythonDirToTmp']) {
    workingDir 'build/tmp/python/hail/docs'
    commandLine 'make', 'clean', 'html'
    environment SPARK_HOME: sparkHome
    environment SPARK_CLASSPATH: '' + projectDir + '/build/libs/hail-all-spark.jar'
    environment PYTHONPATH: '' + projectDir + '/python:' + sparkHome + '/python:' + sparkHome + '/python/lib/py4j-' + py4jVersion + '-src.zip'
    environment HAIL_VERSION: hailVersion
    environment HAIL_RELEASE: hailVersion + '-' + gitHash
}

task copyHailDocs(type: Exec, dependsOn: ['makeHailDocs', 'setupDocsDirs']) {
    commandLine 'mv', 'build/tmp/python/hail/docs/_build/html', 'build/www/docs/stable'
}

task copyHailDocsNoTest(type: Exec, dependsOn: ['makeHailDocsNoTest', 'setupDocsDirs']) {
    commandLine 'mv', 'build/tmp/python/hail/docs/_build/html', 'build/www/docs/stable'
}

task createWebsite(dependsOn: ['copyPDF', 'copyWebsiteContent', 'buildIndex', 'buildJobs', 'copyHailDocs'])

task createDocs(dependsOn: createWebsite)

task createDocsNoTest(dependsOn: ['copyPDF', 'copyWebsiteContent', 'buildIndex', 'buildJobs', 'copyHailDocsNoTest', 'copyPythonDirToTmp'])

task testDocs(dependsOn: ['copyPDF', 'copyWebsiteContent', 'buildIndex', 'buildJobs'])

task assemblePackage(type: Copy, dependsOn: ['createDocs' , 'shadowJar']) {
    from('python') {
        into 'python'
    }
    from('build/www/docs/stable') {
        into 'docs'
    }
    from('scripts') {
        into 'bin'
    }
    from('build/libs/hail-all-spark.jar') {
        into 'jars'
    }
    from('python/hail/docs/tutorials') {
        into 'tutorials'
        include '*.ipynb'
    }
    into 'build/package'
}

task createPackage(type: Zip, dependsOn: ['assemblePackage']) {
    from 'build/package'
    into 'hail'
    baseName 'hail'
}
